server:
  port: 8000

# 유레카 클라이언트 설정
eureka:
  client:
    register-with-eureka: true  # 유레카에 등록할지 여부.
    fetch-registry: true  # 유레카에서 조회할지 여부
    service-url:
     defaultZone: http://10.10.28.97:8761/eureka # 서비스를 등록할 서버 주소를 지정  #임시 : 도커를 위해 현민ip주소에 등록 
  instance:
    instance-id: gateway-microservice-instance # eureka에 등록되는 id 값   

#keycloak 설정          
keycloak:
  realm: MSA
  resource: spring-gateway-client
  auth-server-url: http://10.10.28.97:8080/auth

#라우팅
spring:
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: http://10.10.28.97:8080/auth/realms/MSA
            user-name-attribute: preferred_username
        registration:
          keycloak:
#            provider: keycloak
            client-id: spring-gateway-client
            client-secret: WEcACPUTWPfuhPrEz3bBaHcl7OLLmYX1
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/login/oauth2/code/keycloak'     
  cloud:
   gateway:
      default-filters:
        -  TokenRelay
      routes:
        - id: main-service
          uri: lb://MAIN-SERVICE 
          predicates:
            - Path=/main/** 
          filters:
            - RewritePath=/main/?(?<segment>.*), /$\{segment}       
                  
        - id: product-service
          uri: lb://PRODUCT-SERVICE 
          predicates:
            - Path=/product/** 
          filters:
            - RewritePath=/product/?(?<segment>.*), /$\{segment}        
              
        - id: manage-service
          uri: lb://MANAGE-SERVICE 
          predicates:
            - Path=/manage/** 
          filters:
            - RewritePath=/manage/?(?<segment>.*), /$\{segment}
               
        - id: order-service
          uri: lb://ORDER-SERVICE 
          predicates:
            - Path=/order/** 
          filters:
            - RewritePath=/order/?(?<segment>.*), /$\{segment}                
                                             
        - id: confirm-service
          uri: lb://CONFIRM-SERVICE 
          predicates:
            - Path=/confirm/** 
          filters:
            - RewritePath=/confirm/?(?<segment>.*), /$\{segment}                                                   
                 
        - id: approve-service
          uri: lb://APPROVE-SERVICE 
          predicates:
            - Path=/approve/** 
          filters:
            - RewritePath=/approve/?(?<segment>.*), /$\{segment}              
        
        - id: error-service-fallback
          uri: lb://ERROR-SERVICE-FALLBACK # uri: http://localhost:8001 # 포워딩 할 주소, http://localhost:8000/menu 로 들어오면 http://localhost:8001로 포워딩
          predicates:
            - Path=/fallback/** # 해당 gateway 서버의 /menu/**로 들어오는 menu-service로 인식하겠다는 조건
          filters:
            - RewritePath=/fallback/?(?<segment>.*), /$\{segment}


               

config:
  test: docker config  with gateway!!!!!
  
